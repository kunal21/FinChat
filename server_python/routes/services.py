# # server_python/routes/services.py

from flask import Blueprint, request, jsonify, current_app
import requests
import logging
from webhook_handlers import (
    handle_transactions_webhook,
    items_handler,
    unhandled_webhook
)

bp = Blueprint("services", __name__)
logger = logging.getLogger(__name__)

@bp.route("/ngrok", methods=["GET"])
def get_ngrok_url():
    """Returns the URL of the current public endpoint generated by ngrok."""
    try:
        response = requests.get('http://ngrok:4040/api/tunnels')
        tunnels = response.json()['tunnels']
        http_tunnel = next(t for t in tunnels if t['proto'] == 'http')
        return jsonify({'url': http_tunnel['public_url']})
    except Exception as e:
        logger.error(f"Error getting ngrok URL: {str(e)}")
        return jsonify({'error': str(e)}), 500

@bp.route("/services/webhook", methods=["POST"])
async def handle_webhook():
    """
    Handles incoming webhooks from Plaid.
    https://plaid.com/docs/#webhooks
    """
    try:
        request_body = request.get_json()
        webhook_type = request_body.get('webhook_type', '').lower()
        
        logger.debug(f"Received webhook of type: {webhook_type}")
        logger.debug(f"Webhook payload: {request_body}")
        
        # Get socket.io instance from Flask app config
        io = current_app.config['socketio']
        if not io:
            logger.error("Socket.io instance not found in app config")
            return jsonify({'error': 'Socket.io not initialized'}), 500
        
        # Map webhook types to handlers
        webhook_handler_map = {
            'transactions': handle_transactions_webhook,
            'item': items_handler,
        }
        
        # Get the appropriate handler or use unhandled_webhook
        handler = webhook_handler_map.get(webhook_type, unhandled_webhook)
        
        # Call the handler
        await handler(request_body, io)
        
        return jsonify({'status': 'ok'})
    except Exception as e:
        logger.error(f"Error handling webhook: {str(e)}")
        return jsonify({'error': str(e)}), 500