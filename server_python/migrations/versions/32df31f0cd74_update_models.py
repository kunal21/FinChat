"""Update models

Revision ID: 32df31f0cd74
Revises: 518879ffc637
Create Date: 2025-05-10 20:22:27.713311

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '32df31f0cd74'
down_revision = '518879ffc637'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('messages_table', schema=None) as batch_op:
        batch_op.add_column(sa.Column('author', sa.String(), nullable=False))

    with op.batch_alter_table('transactions_table', schema=None) as batch_op:
        batch_op.add_column(sa.Column('personal_finance_category_primary', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('personal_finance_category_detailed', sa.Text(), nullable=True))

    # users view
    op.execute(sa.text("""
    CREATE OR REPLACE VIEW users AS
    SELECT id, username, created_at, updated_at
      FROM users_table;
    """))

    # items view
    op.execute(sa.text("""
    CREATE OR REPLACE VIEW items AS
    SELECT id,
           plaid_item_id,
           user_id,
           plaid_access_token,
           plaid_institution_id,
           status,
           created_at,
           updated_at,
           transactions_cursor
      FROM items_table;
    """))

    # assets view
    op.execute(sa.text("""
    CREATE OR REPLACE VIEW assets AS
    SELECT id,
           user_id,
           value,
           description,
           created_at,
           updated_at
      FROM assets_table;
    """))

    # accounts view
    op.execute(sa.text("""
    CREATE OR REPLACE VIEW accounts AS
    SELECT a.id,
           a.plaid_account_id,
           a.item_id,
           i.plaid_item_id,
           i.user_id,
           a.name,
           a.mask,
           a.official_name,
           a.current_balance,
           a.available_balance,
           a.iso_currency_code,
           a.unofficial_currency_code,
           a.type,
           a.subtype,
           a.created_at,
           a.updated_at
      FROM accounts_table a
      LEFT JOIN items_table i ON i.id = a.item_id;
    """))

    op.execute(sa.text("DROP VIEW IF EXISTS transactions;"))
    # transactions view
    op.execute(sa.text("""
    CREATE OR REPLACE VIEW transactions AS
    SELECT 
        t.id,
        t.plaid_transaction_id,
        t.account_id,
        a.plaid_account_id,
        a.item_id,
        a.plaid_item_id,
        a.user_id,
        t.category,
        t.personal_finance_category_primary,
        t.personal_finance_category_detailed,
        t.type,
        t.name,
        t.amount,
        t.iso_currency_code,
        t.unofficial_currency_code,
        t.date,
        t.pending,
        t.account_owner,
        t.created_at,
        t.updated_at
    FROM transactions_table t
    LEFT JOIN accounts a ON t.account_id = a.id;
    """))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(sa.text("DROP VIEW IF EXISTS transactions;"))
    op.execute(sa.text("DROP VIEW IF EXISTS accounts;"))
    op.execute(sa.text("DROP VIEW IF EXISTS assets;"))
    op.execute(sa.text("DROP VIEW IF EXISTS items;"))
    op.execute(sa.text("DROP VIEW IF EXISTS users;"))

    with op.batch_alter_table('transactions_table', schema=None) as batch_op:
        batch_op.drop_column('personal_finance_category_detailed')
        batch_op.drop_column('personal_finance_category_primary')

    with op.batch_alter_table('messages_table', schema=None) as batch_op:
        batch_op.drop_column('author')

    op.drop_table('transactions')
    op.drop_table('accounts')
    # ### end Alembic commands ###
